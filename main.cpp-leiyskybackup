/*
#include <thread>
#include <vector>
#include <fstream>
#include <iostream>
#include <unistd.h>
#include <fcntl.h>

constexpr int len = 10'000'001;
char str[len];

void run(long long cycle, int id) {
while(cycle--) {
}
}

int main() {
for (int i=0; i<len-1; ++i) {
str[i] = 'c';
}

long long cycle = 5e12;
long long core = 48;

std::vector<std::thread> save;

for(int i=0; i<core; ++i)
save.emplace_back([i=i]{
std::ofstream fout("a.out"+std::to_string(i));
long long cycle = 5e12;
while(cycle--) {
fout << str << std::endl;
}
});
//    for(int i=core/2; i<core; ++i)
//        save.emplace_back(write, cycle, i);

for(auto &th:save)
th.join();
}
*/

#include <bits/stdc++.h>

static constexpr size_t PRODUCER_NUM = 500;
static constexpr size_t CONSUMER_NUM = 500;

class ProducerConsumer
{
	public:
		ProducerConsumer()
		{
		}

		void produce()
		{
			for (;;)
			{
				{
					std::lock_guard<std::mutex> lg(mu);
					buffer.emplace_back("1234567890123456789012345678901234567890123456789012345678901234");
				}
				cv.notify_one();
			}
		}

		void consume()
		{
			for (;;)
			{
				std::unique_lock<std::mutex> lg(mu);
				cv.wait(lg, [&]()
						{ return buffer.size() > 0; });
				std::string str = buffer.front();
				buffer.pop_front();
				lg.unlock();
				for (size_t i = 0; i < 500; ++i)
				{
					std::string tmp = str;
					for (const auto &c : tmp)
					{
						c + 100;
					}
				}
			}
		}

	private:
		std::deque<std::string> buffer;
		std::mutex mu;
		std::condition_variable cv;
};

int main()
{
	auto test = new ProducerConsumer();
	std::vector<std::thread> threads;

	for (size_t i = 0; i < CONSUMER_NUM; i++)
	{
		threads.emplace_back(&ProducerConsumer::consume, test);
	}

	for (size_t i = 0; i < PRODUCER_NUM; i++)
	{
		threads.emplace_back(&ProducerConsumer::produce, test);
	}

	for (auto &thread : threads)
	{
		thread.join();
	}
}

